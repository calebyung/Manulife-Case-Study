import xgboost as xgb
import pandas as pd
import numpy as np
import os
import json
from io import StringIO

def model_fn(model_dir):
    booster = xgb.Booster()
    booster.load_model(os.path.join(model_dir, "model.xgb"))
    return booster

def input_fn(request_body, request_content_type):
    if request_content_type == "text/csv":
        # Read CSV into DataFrame
        df = pd.read_csv(StringIO(request_body), header=None)
        
        # Save original input for join_source='Input'
        input_fn.original_input = df.copy()

        # Apply input_filter='$[1:]' — skip first column
        return df.iloc[:, 1:]
    
    raise ValueError(f"Unsupported content type: {request_content_type}")

def predict_fn(input_data, model):
    dmatrix = xgb.DMatrix(input_data)
    predictions = model.predict(dmatrix)
    return predictions

def output_fn(prediction, response_content_type):
    # Apply output_filter='$[0,-1]' — return first column and prediction
    original_df = input_fn.original_input
    output_df = pd.DataFrame({
        'id': original_df.iloc[:, 0],       # first column
        'prediction': prediction            # model output
    })

    if response_content_type == "text/csv":
        return output_df.to_csv(index=False, header=False)
    
    elif response_content_type == "application/json":
        return json.dumps(output_df.to_dict(orient="records"))
    
    raise ValueError(f"Unsupported response content type: {response_content_type}")
